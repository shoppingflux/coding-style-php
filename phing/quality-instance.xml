<project name="${project.name}" description="Quality assurance related tasks">

    <property name="standard.phpcs" value="${project.basedir}/vendor/shoppingfeed/coding-style-php/phpcs/ruleset.xml"/>
    <property name="standard.md"    value="${project.basedir}/vendor/shoppingfeed/coding-style-php/phpmd/phpmd.xml"/>
    <property name="exec.phpmd"     value="${project.basedir}/vendor/bin/phpmd"/>
    <property name="exec.phpcs"     value="${project.basedir}/vendor/bin/phpcs"/>
    <property name="exec.phpcbf"    value="${project.basedir}/vendor/bin/phpcbf"/>
    <property name="dir.build"      value="${project.basedir}/build"/>
    <property name="dir.report.qa"  value="${dir.build}/quality-insurance"/>
    <property name="phpcs.symlink"  value="${project.basedir}/phpcs.xml"/>

    <property file="./qa.properties" />

    <target name="qa" description="Quality assurance check" depends="qa:phpcs, qa:phpmd"/>
    <target name="sonar:install" description="Install sonar scanner" depends="sonar:download,sonar:unpack"/>

    <target name="qa:phpmd" description="Mess detector">
        <exec executable="${exec.phpmd}" checkreturn="true" passthru="true">
            <arg path="${project.basedir}/src"/>
            <arg path="xml"/>
            <arg path="${standard.md}"/>
            <arg value="--exclude"/>
            <arg path="*/tests/*"/>
            <arg value="--reportfile"/>
            <arg path="${dir.report.qa}/pmd.xml"/>
        </exec>
    </target>

    <target name="qa:phpcs" description="Find coding standard violations using PHP_CodeSniffer" depends="qa:prepare">
        <exec executable="${exec.phpcs}" checkreturn="true" passthru="true">
            <arg value="--report=summary"/>
            <arg value="--standard=${standard.phpcs}"/>
            <arg value="--report-emacs=${dir.report.qa}/phpcs.log"/>
            <arg value="--report-checkstyle=${dir.report.qa}/phpcs.xml"/>
            <arg value="--extensions=php"/>
            <arg path="${project.basedir}/src"/>
        </exec>
    </target>

    <target name="qa:fix-phpcs" description="Automatically Fix coding standard violations" depends="qa:prepare">
        <exec executable="${exec.phpcbf}" checkreturn="true" passthru="true">
            <arg path="${project.basedir}/src"/>
            <arg value="--standard=${standard.phpcs}"/>
        </exec>
    </target>

    <target name="qa:prepare">
        <mkdir dir="${dir.report.qa}" mode="777"/>
        <exec executable="ln" checkreturn="false" passthru="true">
            <arg value="-sf"/>
            <arg value="${standard.phpcs}"/>
            <arg value="${phpcs.symlink}"/>
        </exec>
    </target>

    <target name="qa:sonar" description="Create report the a sonar server instance" depends="qa:prepare, sonar:init">
        <exec executable="${exec.sonar}" checkreturn="false" passthru="true">
            <arg value="-Dsonar.host.url=${sonar.host.url}"/>
            <arg value="-Dsonar.sources=${sonar.sources}"/>
            <arg value="-Dsonar.tests=${sonar.tests}"/>
            <arg value="-Dsonar.login=${sonar.login}"/>
            <arg value="-Dsonar.projectKey=${sonar.projectKey}"/>
            <arg value="-Dsonar.projectName=${phing.project.name}"/>
            <arg value="-Dsonar.projectVersion=${project.version}"/>
            <arg value="-Dsonar.branch=${sonar.branch}"/>
            <arg value="-Dsonar.exclusions=${sonar.exclusions}"/>
        </exec>
    </target>

    <target name="sonar:pull-request" description="analyse github pull request with sonar scanner" depends="qa:prepare, sonar:init">
        <exec executable="${exec.sonar}" checkreturn="false" passthru="true">
            <arg value="-Dsonar.analysis.mode=preview"/>
            <arg value="-Dsonar.host.url=${sonar.host.url}"/>
            <arg value="-Dsonar.sources=${sonar.sources}"/>
            <arg value="-Dsonar.exclusions=${sonar.exclusions}"/>
            <arg value="-Dsonar.projectKey=${sonar.projectKey}"/>
            <arg value="-Dsonar.projectName=${phing.project.name}"/>
            <arg value="-Dsonar.projectVersion=${project.version}"/>
            <arg value="-Dsonar.github.pullRequest=${github.pullRequest}"/>
            <arg value="-Dsonar.login=${sonar.login}"/>
            <arg value="-Dsonar.github.repository=${github.repository}"/>
            <arg value="-Dsonar.github.oauth=${github.token}"/>
        </exec>
    </target>

    <target name="sonar:download">
        <exec executable="${exec.curl}" checkreturn="true" passthru="true">
            <arg value="-o"/>
            <arg path="${dir.sonar}/sonar-scanner.zip"/>
            <arg value="-L"/>
            <arg value="${sonar.runner.archive}"/>
        </exec>
    </target>

    <target name="sonar:unpack" depends="sonar:download">
        <unzip file="${dir.sonar}/sonar-scanner.zip" todir="${dir.sonar}/" forceExtract="true"/>
        <chmod file="${exec.sonar}" mode="755"/>
    </target>

    <target name="sonar:init">
        <if>
            <not>
                <isset property="project.version"/>
            </not>
            <then>
                <exec command="git describe --abbrev=0 --tags" outputProperty="project.version" />
            </then>
        </if>
        <if>
            <not>
                <isset property="sonar.branch"/>
            </not>
            <then>
                <exec command="git branch | grep \* | cut -d ' ' -f2" outputProperty="sonar.branch" />
            </then>
        </if>
    </target>

</project>
